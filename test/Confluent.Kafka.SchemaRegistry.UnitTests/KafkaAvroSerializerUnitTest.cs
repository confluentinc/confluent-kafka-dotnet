//using Moq;
//using Xunit;
//using Avro.Specific;
//using Avro;

//namespace Confluent.Kafka.SchemaRegistry.UnitTests.Serializer
//{
//    // ------------------------------------------------------------------------------
//    // <auto-generated>
//    //    Generated by SchemaRegistry.ConsoleTool.exe, version 0.9.0.0
//    //    Changes to this file may cause incorrect behavior and will be lost if code
//    //    is regenerated
//    // </auto-generated>
//    // ------------------------------------------------------------------------------

//    public partial class User : ISpecificRecord
//        {
//            public static Avro.Schema _SCHEMA = Avro.Schema.Parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.example.tests\",\"fields\":[{\"name\":" +
//                    "\"name\",\"type\":\"string\"},{\"name\":\"favorite_number\",\"type\":[\"null\",\"int\"]},{\"name\"" +
//                    ":\"favorite_color\",\"type\":[\"null\",\"string\"]}]}");
//            private string _name;
//            private System.Nullable<int> _favorite_number;
//            private string _favorite_color;
//            public virtual Avro.Schema Schema
//            {
//                get
//                {
//                    return User._SCHEMA;
//                }
//            }
//            public string name
//            {
//                get
//                {
//                    return this._name;
//                }
//                set
//                {
//                    this._name = value;
//                }
//            }
//            public System.Nullable<int> favorite_number
//            {
//                get
//                {
//                    return this._favorite_number;
//                }
//                set
//                {
//                    this._favorite_number = value;
//                }
//            }
//            public string favorite_color
//            {
//                get
//                {
//                    return this._favorite_color;
//                }
//                set
//                {
//                    this._favorite_color = value;
//                }
//            }
//            public virtual object Get(int fieldPos)
//            {
//                switch (fieldPos)
//                {
//                    case 0: return this.name;
//                    case 1: return this.favorite_number;
//                    case 2: return this.favorite_color;
//                    default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
//                };
//            }
//            public virtual void Put(int fieldPos, object fieldValue)
//            {
//                switch (fieldPos)
//                {
//                    case 0: this.name = (System.String)fieldValue; break;
//                    case 1: this.favorite_number = (System.Nullable<int>)fieldValue; break;
//                    case 2: this.favorite_color = (System.String)fieldValue; break;
//                    default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
//                };
//            }
//        }
    
//    public class KafkaAvroSerializerUnitTest
//    {
//        [Fact]
//        public void SpecificSerializerAndDeserialize()
//        {
//            var schemaRegistry = new Mock<ISchemaRegistryClient>();
//            schemaRegistry.Setup(x => x.GetRegistrySubject("topic", false)).Returns("topic-value");
//            schemaRegistry.Setup(x => x.RegisterAsync("topic-value", User._SCHEMA.ToString())).ReturnsAsync(1);
//            schemaRegistry.Setup(x => x.GetSchemaAsync(1)).ReturnsAsync(User._SCHEMA.ToString());

//            var user = new User
//            {
//                favorite_color = "blue",
//                favorite_number = 100,
//                name = "awesome"
//            };
//            var serializer = new KafkaAvroSerializer<User>(schemaRegistry.Object, false);
//            var bytes = serializer.Serialize("topic", user);

//            var deserUser = serializer.Deserialize("topic", bytes);

//            Assert.Equal(user.name, deserUser.name);
//            Assert.Equal(user.favorite_color, deserUser.favorite_color);
//            Assert.Equal(user.favorite_number, deserUser.favorite_number);
//        }
//    }
//}
