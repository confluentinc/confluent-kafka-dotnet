<API>  

<Member name="OffsetsForTimes">
    <summary>
        Look up the offsets for the given partitions by timestamp. The returned offset for each partition is the
        earliest offset whose timestamp is greater than or equal to the given timestamp in the corresponding partition.
    </summary>
    <remarks>
        This is a blocking call. The consumer does not have to be assigned the partitions.
        If the message format version in a partition is before 0.10.0, i.e. the messages do not have timestamps, null
        will be returned for that partition.
        Note that this method may block indefinitely if the partition does not exist.
    </remarks>
    <param name="timestampsToSearch">
        The mapping from partition to the timestamp to look up.
    </param>
    <param name="timeout">
        The maximum period of time the call may block.
    </param>
    <returns>
       A mapping from partition to the timestamp and offset of the first message with timestamp greater
       than or equal to the target timestamp. null will be returned for the partition if there is no such message.
    </returns>
</Member>

<Member name="Pause">
    <summary>
        Pause consumption for the provided list of partitions.
    </summary>
    <param name="partitions">
        The partitions to pause consumption of.
    </param>
    <returns>
        Per partition success or error.
    </returns>
</Member>

<Member name="Resume">
    <summary>
        Resume consumption for the provided list of partitions.
    </summary>
    <param name="partitions">
        The partitions to resume consumption of.
    </param>
    <returns>
        Per partition success or error.
    </returns>
</Member>
  
<Member name="StoreOffsets">
    <summary>
        Store offsets for one or more partitions. 
        
        The offset will be committed (written) to the offset store according
        to `auto.commit.interval.ms` or manual offset-less commit().
    </summary>
    <remarks>
        `enable.auto.offset.store` must be set to "false" when using this API.
    </remarks>
    <param name="offsets">
        List of offsets to be commited.
    </param>
    <returns>
        For each topic/partition returns current stored offset
        or a partition specific error.
    </returns>
</Member>

<Member name="Seek">
    <summary>
        Seek consumer for topic+partition to <parmref name="offset"/> which is either an
        absolute or logical offset. This must only be done for partitions that are 
        currently being consumed (i.e., have been Assign()ed). To set the start offset for 
        not-yet-consumed partitions you should use the 
        <see cref="Confluent.Kafka.Consumer.Assign(IEnumerable{TopicPartitionOffset})" /> 
        method instead.
    </summary>
    <param name="tpo">
        The topic/partition to seek on and the offset to seek to.
    </param>
</Member>

<Member name="Committed_IEnumerable_TimeSpan">
    <summary>
        Retrieve current committed offsets for topics + partitions.
    
        The offset field of each requested partition will be set to the offset
        of the last consumed message, or Offset.Invalid in case there was
        no previous message, or, alternately a partition specific error may also be
        returned.
    
        throws KafkaException if there was a problem retrieving the above information.
    </summary>
</Member>

<Member name="Position_IEnumerable">
    <summary>
        Retrieve current positions (offsets) for topics + partitions.
    
        The offset field of each requested partition will be set to the offset
        of the last consumed message + 1, or Offset.Invalid in case there was
        no previous message, or, alternately a partition specific error may also be
        returned.
    
        throws KafkaException if there was a problem retrieving the above information.
    </summary>
</Member>

<Member name="MemberId">
    <summary>
        Gets the (dynamic) group member id of this consumer (as set by
        the broker).
    </summary>
</Member>

<Member name="Commit_IEnumerable">
    <summary>
        Commit an explicit list of offsets.
    </summary>
    <remarks>
        Note: A consumer which has position N has consumed records with offsets 0 through N-1 
        and will next receive the record with offset N.
    </remarks>
</Member>

<Member name="Commit_Message">
    <summary>
        Commits an offset based on the topic/partition/offset of a message.
        The next message to be read will be that following <paramref name="message" />.
    </summary>
    <param name="message">
        The message used to determine the committed offset.
    </param>
    <remarks>
        A consumer which has position N has consumed records with offsets 0 through N-1 and will next receive the record with offset N.
        Hence, this method commits an offset of <paramref name="message" />.Offset + 1.
    </remarks>
</Member>

<Member name="Commit">
    <summary>
        Commit offsets for the current assignment.
    </summary>
</Member>

<Member name="StoreOffset_Message">
    <summary>
        Store offsets for a single partition based on the topic/partition/offset
        of a message.
         
        The offset will be committed (written) to the offset store according
        to `auto.commit.interval.ms` or manual offset-less commit().
    </summary>
    <remarks>
        `enable.auto.offset.store` must be set to "false" when using this API.
    </remarks>
    <param name="message">
        A message used to determine the offset to store and topic/partition.
    </param>
    <returns>
        Current stored offset or a partition specific error.
    </returns>
</Member>

<Member name="Assign_IEnumerable_TopicPartition">
    <summary>
        Update the assignment set to <paramref name="partitions" />.
    
        The assignment set is the complete set of partitions to consume
        from and will replace any previous assignment.
    </summary>
    <param name="partitions">
        The set of partitions to consume from. Consumption will resume
        from the last committed offset on each partition, or according
        to the 'auto.offset.reset' configuration parameter if no offsets
        have been committed yet.
    </param>
</Member>

<Member name="Assign_IEnumerable_TopicPartitionOffset">
    <summary>
        Update the assignment set to <paramref name="partitions" />.
    
        The assignment set is the complete set of partitions to consume
        from and will replace any previous assignment.
    </summary>
    <param name="partitions">
        The set of partitions to consume from. If an offset value of
        Offset.Invalid (-1001) is specified for a partition, consumption
        will resume from the last committed offset on that partition, or
        according to the 'auto.offset.reset' configuration parameter if
        no offsets have been committed yet.
    </param>
</Member>

<Member name="Assign_TopicPartitionOffset">
    <summary>
        Update the assignment set to a single <paramref name="partition" />.
    
        The assignment set is the complete set of partitions to consume
        from and will replace any previous assignment.
    </summary>
    <param name="partition">
        The partition to consume from. If an offset value of Offset.Invalid
        (-1001) is specified, consumption will resume from the last committed
        offset, or according to the 'auto.offset.reset' configuration parameter
        if no offsets have been committed yet.
    </param>
</Member>

<Member name="Assign_TopicPartition">
    <summary>
        Update the assignment set to a single <paramref name="partition" />.
    
        The assignment set is the complete set of partitions to consume
        from and will replace any previous assignment.
    </summary>
    <param name="partition">
        The partition to consume from. Consumption will resume from the last
        committed offset, or according to the 'auto.offset.reset' configuration
        parameter if no offsets have been committed yet.
    </param>
</Member>

<Member name="Unassign">
    <summary>
        Stop consumption and remove the current assignment.
    </summary>
</Member>

<Member name="Unsubscribe">
    <summary>
        Unsubscribe from the current subscription set.
    </summary>
</Member>

<Member name="Subscribe_string">
    <summary>
        Update the subscription set to a single topic.
    
        Any previous subscription will be unassigned and unsubscribed first.
    </summary>
</Member>

<Member name="Subscribe_IEnumerable">
    <summary>
        Update the subscription set to topics.
    
        Any previous subscription will be unassigned and unsubscribed first.
    
        The subscription set denotes the desired topics to consume and this
        set is provided to the partition assignor (one of the elected group
        members) for all clients which then uses the configured
        partition.assignment.strategy to assign the subscription sets's
        topics's partitions to the consumers, depending on their subscription.
    </summary>
</Member>

<Member name="Subscription">
    <summary>
        Gets the current partition subscription as set by Subscribe.
    </summary>
</Member>

<Member name="Assignment">
    <summary>
        Gets the current partition assignment as set by Assign.
    </summary>
</Member>

<Member name="OnPartitionsAssigned">
    <summary>
        Raised on new partition assignment.
        You should typically call the Consumer.Assign method in this handler.
    </summary>
    <remarks>
        Executes on the same thread as every other Consumer event handler 
        (except OnLog which may be called from an arbitrary thread).
    </remarks>
</Member>

<Member name="OnPartitionsRevoked">
    <summary>
        Raised when a partition assignment is revoked.
        You should typically call the Consumer.Unassign method in this handler.
    </summary>
    <remarks>
        Executes on the same thread as every other Consumer event handler 
        (except OnLog which may be called from an arbitrary thread).
    </remarks>
</Member>

<Member name="OnOffsetsCommitted">
    <summary>
        Raised to report the result of (automatic) offset commits.
        Not raised as a result of the use of the Commit method.
    </summary>
    <remarks>
        Executes on the same thread as every other Consumer event handler 
        (except OnLog which may be called from an arbitrary thread).
    </remarks>
</Member>

<Member name="OnConsumeError">
    <summary>
        Raised when a consumed message has an error != NoError (both when Consume or Poll is used for polling).
        Also raised on deserialization errors.
    </summary>
    <remarks>
        Executes on the same thread as every other Consumer event handler 
        (except OnLog which may be called from an arbitrary thread).
    </remarks>
</Member>

<Member name="OnError">
    <summary>
        Raised on critical errors, e.g. connection failures or all 
        brokers down. Note that the client will try to automatically 
        recover from errors - these errors should be seen as 
        informational rather than catastrophic
    </summary>
    <remarks>
        Executes on the same thread as every other Consumer event 
        handler (except OnLog which may be called from an arbitrary thread).
    </remarks>
</Member>

<Member name="OnMessage">
    <summary>
        Raised when a new message is avaiable for consumption. NOT raised when Consumer.Consume
        is used for polling (only when Consmer.Poll is used for polling). NOT raised when the 
        message has an Error (OnConsumeError is raised in that case).
    </summary>
    <remarks>
        Executes on the same thread as every other Consumer event handler (except OnLog which may be called from an arbitrary thread).
    </remarks>
</Member>

<Member name="OnPartitionEOF">
    <summary>
        Raised when the consumer reaches the end of a topic/partition it is reading from.
    </summary>
    <remarks>
        Executes on the same thread as every other Consumer event handler (except OnLog which may be called from an arbitrary thread).
    </remarks>
</Member>

<Member name="Consume_Message">
    <summary>
        Poll for new messages / consumer events. Blocks until a new 
        message or event is ready to be handled or the timeout period
        has elapsed.
    </summary>
    <param name="message">
        A consumed message, or null if no messages are 
        available for consumption.
    </param>
    <returns>
        true: a message (with non-error state) was consumed.
        false: no message was available for consumption.
    </returns>
    <remarks>
        Will invoke events for OnPartitionsAssigned/Revoked,
        OnOffsetsCommitted, OnConsumeError etc. on the calling 
        thread.
    </remarks>
</Member>

<Member name="Consume_Message_int">
    <param name="millisecondsTimeout">
        The maximum time to block (in milliseconds), or -1 to 
        block indefinitely. You should typically use a
        relatively short timout period because this operation
        cannot be cancelled.
    </param>
</Member>

<Member name="Consume_Message_TimeSpan">
    <param name="timeout">
        The maximum time to block. You should typically use a
        relatively short timout period because this operation
        cannot be cancelled.
    </param>
</Member>

<Member name="Poll_int">
    <summary>
        Poll for new consumer events, including new messages
        ready to be consumed (which will trigger the OnMessage
        event). Blocks until a new event is available to be 
        handled or the timeout period <paramref name="millisecondsTimeout" /> 
        has elapsed.
    </summary>
    <param name="millisecondsTimeout"> 
        The maximum time to block (in milliseconds), or -1 to 
        block indefinitely. You should typically use a
        relatively short timout period because this operation
        cannot be cancelled.
    </param>
</Member>

<Member name="Poll_TimeSpan">
    <summary>
        Poll for new consumer events, including new messages
        ready to be consumed (which will trigger the OnMessage
        event). Blocks until a new event is available to be
        handled or the timeout period <paramref name="timeout" /> 
        has elapsed.
    </summary>
    <param name="timeout"> 
        The maximum time to block. You should typically use a
        relatively short timout period because this operation
        cannot be cancelled.
    </param>
</Member>

<Member name="Poll">
    <summary>
        Poll for new consumer events, including new messages
        ready to be consumed (which will trigger the OnMessage
        event).
    </summary> 
    <remarks>
        Blocks indefinitely until a new event is ready.
    </remarks>
</Member>

<Member name="Dispose">
    <summary>
        Releases all resources used by this Consumer.
     
        This call will block until the consumer has revoked its assignment, 
        calling the rebalance event if it is configured, committed offsets to 
        broker, and left the consumer group.
     
        [API-SUBJECT-TO-CHANGE] - The Dispose method should not block. We 
        plan to separate out consumer close functionality from this method.
    </summary>
</Member>

<Member name="KeyDeserializer">
    <summary>
        The IDeserializer implementation instance used to deserialize keys.
    </summary>
</Member>
        
<Member name="ValueDeserializer">
    <summary>
        The IDeserializer implementation instance used to deserialize values.
    </summary>
</Member>

<Member name="GetWatermarkOffsets_TopicPartition">
    <summary>
        Get last known low (oldest/beginning) and high (newest/end)
        offsets for a topic/partition.
         
        [API-SUBJECT-TO-CHANGE] - The API associated with this functionality 
        is subject to change.
    </summary>
    <remarks>
        The low offset is updated periodically (if statistics.interval.ms is set)
        while the high offset is updated on each fetched message set from the broker.
    
        If there is no cached offset (either low or high, or both) then
        Offset.Invalid will be returned for the respective offset.
    </remarks>
    <param name="topicPartition">
        The topic/partition of interest.
    </param>
    <returns>
        The requested WatermarkOffsets.
    </returns>
</Member>

</API>
