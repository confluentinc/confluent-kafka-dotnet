using System.Collections.Generic;
using System.Linq;

namespace Confluent.Kafka
{
    /// <summary>
    ///     Metadata pertaining to a single Kafka cluster
    /// </summary>
    public struct Metadata
    {
        /// <summary>
        ///     Information about each constituent broker of the cluster.
        /// </summary>
        public List<BrokerMetadata> Brokers { get; set; }

        /// <summary>
        ///     Information about every topic managed by in the cluster.
        /// </summary>
        public List<TopicMetadata> Topics { get; set; }

        /// <summary>
        /// </summary>
        public int OriginatingBrokerId { get; set; }

        /// <summary>
        /// </summary>
        public string OriginatingBrokerName { get; set; }

        public override string ToString()
        {
            return $@"
OriginatingBrokerId: {OriginatingBrokerId}
OriginatingBrokerName: {OriginatingBrokerName}

--- BROKERS ---
{Brokers.Aggregate("", (accum, next) => accum + next.ToString())}

--- TOPICS ---
{Topics.Aggregate("", (accum, next) => accum + next.ToString())}";
        }
    }

    /// <summary>
    ///     Metadata pertaining to a single Kafka broker.
    /// </summary>
    public struct BrokerMetadata
    {
        public int BrokerId { get; set; }
        public string Host { get; set; }
        public int Port { get; set; }

        public override string ToString()
        {
            return $@"
BrokderId: {BrokerId}
Host: {Host}
Port: {Port}";
        }
    }

    /// <summary>
    ///     Metadata pertaining to a single Kafka topic partition.
    /// </summary>
    public struct PartitionMetadata
    {
        public int PartitionId { get; set; }
        public int Leader { get; set; }
        public int[] Replicas { get; set; }
        public int[] InSyncReplicas { get; set; }
        public ErrorCode Error { get; set; }

        public override string ToString()
        {
            return $@" PartitionId: {PartitionId}
 Leader: {Leader}
 Replicas: {Replicas.Aggregate("", (accum, next) => accum + next.ToString() + " ")}
 InSyncReplicas: {InSyncReplicas.Aggregate("", (accum, next) => accum + next.ToString() + " ")}
 PartitionMetadata Error: {Error}";
        }
    }

    /// <summary>
    ///     Metadata pertaining to a single Kafka topic.
    /// </summary>
    public struct TopicMetadata
    {
        public string Topic { get; set; }
        public List<PartitionMetadata> Partitions { get; set; }
        public ErrorCode Error { get; set; }

        public override string ToString()
        {
            return $@"
Topic: {Topic}
Partitions:
{Partitions.Aggregate("", (accum, next) => accum + next.ToString())}
TopicMetadata Error: {Error}
";
        }
    }


    public struct TopicPartition
    {
        public TopicPartition(string topic, int partition)
        {
            Topic = topic;
            Partition = partition;
        }

        public string Topic { get; set; }
        public int Partition { get; set; }

        public override string ToString() => Topic + " " + Partition;
    }

    public struct TopicPartitionOffset
    {
        public TopicPartitionOffset(string topic, int partition, long offset)
        {
            Topic = topic;
            Partition = partition;
            Offset = offset;
        }

        public string Topic { get; set; }
        public int Partition { get; set; }
        public long Offset { get; set; }

        public TopicPartition TopicPartition
        {
            get
            {
                return new TopicPartition
                {
                    Topic = Topic,
                    Partition = Partition
                };
            }
        }

        public override string ToString() => Topic + " " + Partition + " " + Offset;
    }

    public struct Offsets
    {
        public long Low { get; set; }
        public long High { get; set; }
    }

    public struct GroupInfo
    {
        public BrokerMetadata Broker { get; set; } /**< Originating broker info */
        public string Group { get; set; }          /**< Group name */
        public ErrorCode Error { get; set; }       /**< Broker-originated error */
        public string State { get; set; }          /**< Group state */
        public string ProtocolType { get; set; }   /**< Group protocol type */
        public string Protocol { get; set; }       /**< Group protocol */
        public List<GroupMemberInfo> Members { get; set; } /**< Group members */
    }

    public struct GroupMemberInfo {
        public string MemberId { get; set; }            /**< Member id (generated by broker) */
        public string ClientId { get; set; }            /**< Client's \p client.id */
        public string ClientHost { get; set; }          /**< Client's hostname */
        public byte[] MemberMetadata { get; set; }      /**< Member metadata (binary),
                                                         *   format depends on \p protocol_type. */
        public byte[] MemberAssignment { get; set; }    /**< Member assignment (binary),
                                                         *   format depends on \p protocol_type. */
    }

    public struct ErrorArgs
    {
        public ErrorCode ErrorCode { get; set; }
        public string Reason { get; set; }
    }

    public struct LogArgs
    {
        public string Name { get; set; }
        public int Level { get; set; }
        public string Facility { get; set; }
        public string Message { get; set; }
    }

    public struct OffsetCommitArgs
    {
        public ErrorCode Error { get; set; }
        public IList<TopicPartitionOffset> Offsets { get; set; }
    }

}
