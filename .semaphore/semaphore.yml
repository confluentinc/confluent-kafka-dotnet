version: v1.0
name: 'confluent-kafka-dotnet build pipeline'
agent:
  machine:
    type: s1-prod-ubuntu24-04-amd64-1
global_job_config:
  prologue:
    commands:
      - checkout
  env_vars:
    - name: CONFIGURATION
      value: Release
    - name: DOTNET_CLI_TELEMETRY_OPTOUT
      value: 'true'

blocks:
  - name: 'Linux x64'
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu24-04-amd64-2
      jobs:
        - name: 'Build and test'
          commands:
            # TODO: install .NET 8.0 SDK in this agent image
            - sudo apt remove dotnet-sdk* dotnet-host* dotnet* aspnetcore* netstandard* -y
            # TODO: remove incorrect focal repos from this agent
            - sudo rm /etc/apt/sources.list.d/*microsoft*
            - sudo apt update && sudo apt install -y dotnet-sdk-6.0 dotnet-sdk-8.0
            - dotnet tool install --global dotnet-coverage
            - dotnet restore
            - make build
            - make test-coverage
            - dotnet-coverage merge test/**/coverage.xml -o unit-coverage.xml -f xml
            - artifact push workflow unit-coverage.xml || true
  - name: 'OSX x64'
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-arm64
      jobs:
        - name: 'Build and test'
          commands:
            - ulimit -n 1024
            - curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 8.0 --install-dir ~/Applications/dotnet
            - export DOTNET_ROOT=~/Applications/dotnet
            - export PATH=~/Applications/dotnet:$PATH
            - export DOTNET_MULTILEVEL_LOOKUP=0
            - which dotnet
            - dotnet --version
            - dotnet --list-sdks
            - dotnet restore -p:TargetFramework=net8.0
            - make test-latest  
  - name: 'Windows x64'
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-windows
      jobs:
        - name: 'Build and test'
          commands:
            - wget https://dot.net/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
            - powershell -ExecutionPolicy ByPass -File dotnet-install.ps1 -Channel 8.0 -Quality GA -InstallDir C:\dotnet
            - $Env:Path += ";C:\dotnet"
            - dotnet restore
            - dotnet test -f net8.0 -c ${CONFIGURATION} --no-build test/Confluent.Kafka.UnitTests/Confluent.Kafka.UnitTests.csproj
            - dotnet test -f net8.0 -c ${CONFIGURATION} --no-build test/Confluent.SchemaRegistry.UnitTests/Confluent.SchemaRegistry.UnitTests.csproj
            - dotnet test -f net8.0 -c ${CONFIGURATION} --no-build test/Confluent.SchemaRegistry.Serdes.UnitTests/Confluent.SchemaRegistry.Serdes.UnitTests.csproj
  - name: 'Windows Artifacts on untagged commits'
    run:
      when: "tag !~ '.*'"
    dependencies:
      - 'Windows x64'
    task:
      agent:
        machine:
          type: s1-prod-windows
      jobs:
        - name: 'Build and push artifacts'
          commands:
            - wget https://dot.net/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
            - powershell -ExecutionPolicy ByPass -File dotnet-install.ps1 -Channel 6.0 -Quality GA -InstallDir C:\dotnet
            - powershell -ExecutionPolicy ByPass -File dotnet-install.ps1 -Channel 8.0 -Quality GA -InstallDir C:\dotnet
            - $Env:Path += ";C:\dotnet"
            - dotnet restore
            - dotnet build Confluent.Kafka.sln -c ${Env:CONFIGURATION}
            - dotnet pack src/Confluent.Kafka/Confluent.Kafka.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry/Confluent.SchemaRegistry.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption/Confluent.SchemaRegistry.Encryption.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.Aws/Confluent.SchemaRegistry.Encryption.Aws.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.Azure/Confluent.SchemaRegistry.Encryption.Azure.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.Gcp/Confluent.SchemaRegistry.Encryption.Gcp.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.HcVault/Confluent.SchemaRegistry.Encryption.HcVault.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Rules/Confluent.SchemaRegistry.Rules.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Serdes.Avro/Confluent.SchemaRegistry.Serdes.Avro.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Serdes.Protobuf/Confluent.SchemaRegistry.Serdes.Protobuf.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Serdes.Json/Confluent.SchemaRegistry.Serdes.Json.csproj -c ${Env:CONFIGURATION} --version-suffix ci-${Env:SEMAPHORE_JOB_ID} --output artifacts
            - artifact push workflow artifacts
  - name: 'Windows Artifacts on tagged commits'
    run:
      when: "tag =~ '.*'"
    dependencies:
      - 'Windows x64'
    task:
      agent:
        machine:
          type: s1-prod-windows
      jobs:
        - name: 'Build and push artifacts'
          commands:
            - wget https://dot.net/v1/dotnet-install.ps1 -OutFile dotnet-install.ps1
            - powershell -ExecutionPolicy ByPass -File dotnet-install.ps1 -Channel 6.0 -Quality GA -InstallDir C:\dotnet
            - powershell -ExecutionPolicy ByPass -File dotnet-install.ps1 -Channel 8.0 -Quality GA -InstallDir C:\dotnet
            - $Env:Path += ";C:\dotnet"
            - dotnet restore
            - dotnet build Confluent.Kafka.sln -c ${Env:CONFIGURATION}
            - dotnet pack src/Confluent.Kafka/Confluent.Kafka.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry/Confluent.SchemaRegistry.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption/Confluent.SchemaRegistry.Encryption.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.Aws/Confluent.SchemaRegistry.Encryption.Aws.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.Azure/Confluent.SchemaRegistry.Encryption.Azure.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.Gcp/Confluent.SchemaRegistry.Encryption.Gcp.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Encryption.HcVault/Confluent.SchemaRegistry.Encryption.HcVault.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Rules/Confluent.SchemaRegistry.Rules.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Serdes.Avro/Confluent.SchemaRegistry.Serdes.Avro.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Serdes.Protobuf/Confluent.SchemaRegistry.Serdes.Protobuf.csproj -c ${Env:CONFIGURATION} --output artifacts
            - dotnet pack src/Confluent.SchemaRegistry.Serdes.Json/Confluent.SchemaRegistry.Serdes.Json.csproj -c ${Env:CONFIGURATION} --output artifacts
            - artifact push workflow artifacts
  - name: 'Integration tests and documentation'
    dependencies: [ ]
    task:
      agent:
        machine:
          type: s1-prod-ubuntu24-04-amd64-2
      prologue:
        commands:
          - '[[ -z $DOCKERHUB_APIKEY ]] || docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY'
          # TODO: install .NET 8.0 SDK in this agent image
          - sudo apt remove dotnet-sdk* dotnet-host* dotnet* aspnetcore* netstandard* -y
          # TODO: remove incorrect focal repos from this agent
          - sudo rm /etc/apt/sources.list.d/*microsoft*
          - sudo apt update && sudo apt install -y dotnet-sdk-8.0
          - dotnet tool install --global dotnet-coverage
      jobs:
        - name: 'Build documentation'
          commands:
            - dotnet tool update --tool-path $PWD docfx
            - ./docfx doc/docfx.json
        - name: 'Build and test with "classic" protocol'
          commands:
            - cd test/docker && docker-compose up -d && sleep 30 && cd ../..
            - export SEMAPHORE_SKIP_FLAKY_TESTS='true'
            - dotnet restore -p:TargetFramework=net8.0
            - cd test/Confluent.Kafka.IntegrationTests && dotnet-coverage collect 'dotnet test -f net8.0 -l "console;verbosity=normal"' -f xml -o ../../classic-coverage.xml && cd ../..
            - artifact push workflow classic-coverage.xml || true
        - name: 'Build and test with "consumer" protocol'
          commands:
            - cd test/docker && docker-compose -f docker-compose-kraft.yaml up -d && cd ../..
            - sleep 300
            - export SEMAPHORE_SKIP_FLAKY_TESTS='true'
            - export TEST_CONSUMER_GROUP_PROTOCOL=consumer
            - dotnet restore -p:TargetFramework=net8.0
            - cd test/Confluent.Kafka.IntegrationTests && dotnet-coverage collect 'dotnet test -f net8.0 -l "console;verbosity=normal"' -f xml -o ../../consumer-coverage.xml && cd ../..
            - artifact push workflow consumer-coverage.xml || true
        - name: 'Schema registry and serdes integration tests'
          commands:
            - cd test/docker && docker-compose up -d && cd ../..
            - export SEMAPHORE_SKIP_FLAKY_TESTS='true'
            - dotnet restore -p:TargetFramework=net8.0
            - cd test/Confluent.SchemaRegistry.Serdes.IntegrationTests && dotnet-coverage collect 'dotnet test -f net8.0 -l "console;verbosity=normal"' -f xml -o ../../sr-target/serdes-coverage.xml && cd ../..
            - cd test/Confluent.SchemaRegistry.IntegrationTests && dotnet-coverage collect 'dotnet test -f net8.0 -l "console;verbosity=normal"' -f xml -o ../../sr-target/coverage.xml && cd ../..
            - artifact push workflow sr-target || true

after_pipeline:
  task:
    agent:
      machine:
        type: s1-prod-ubuntu24-04-amd64-1
    jobs:
      - name: SonarQube
        commands:
          - checkout
          - sem-version java 11
          # TODO: install .NET 8.0 SDK in this agent image
          - sudo apt remove dotnet-sdk* dotnet-host* dotnet* aspnetcore* netstandard* -y
          # TODO: remove incorrect focal repos from this agent
          - sudo rm /etc/apt/sources.list.d/*microsoft*
          - sudo apt update && sudo apt install -y dotnet-sdk-8.0
          - dotnet tool install --global dotnet-coverage
          - artifact pull workflow unit-coverage.xml || true
          - artifact pull workflow classic-coverage.xml || true
          - artifact pull workflow consumer-coverage.xml || true
          - artifact pull workflow sr-target || true
          - dotnet-coverage merge *coverage.xml **/*coverage.xml -o coverage.xml -f xml --remove-input-files
          - emit-sonarqube-data --run_only_sonar_scan
