using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

using Amazon.Lambda.Core;
using AvroSpecificLambda.Entities;
using Confluent.Kafka;
using Confluent.SchemaRegistry;
using Confluent.SchemaRegistry.Serdes;

// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]

namespace AvroSpecificLambda
{
    public class Function
    {
        private static object _syncObject = new object();
        private static Dictionary<Entities.ProducerSettings, IProducer<string, User>> _producers = new Dictionary<ProducerSettings, IProducer<string, User>>();

        /// <summary>
        /// A simple function that takes a string and does a ToUpper
        /// </summary>
        /// <param name="input"></param>
        /// <param name="context"></param>
        /// <returns></returns>
        public async Task<string> FunctionHandler(Entities.ProducerSettings producerSettings, ILambdaContext context)
        {
            var producer = GetProducer(producerSettings);

            User user = new User { name = "Test User Name", favorite_color = "Green", favorite_number = 42 };

            return await producer
                .ProduceAsync(producerSettings.TopicName, new Message<string, User> { Key = user.name, Value = user })
                .ContinueWith(task => task.IsFaulted
                    ? $"error producing message: {task.Exception.ToString()}"
                    : $"produced to: {task.Result.TopicPartitionOffset}");
        }
        
        private IProducer<string, User> GetProducer(Entities.ProducerSettings producerSettings)
        {
            IProducer<string, User> returnValue;

            if (_producers.TryGetValue(producerSettings, out returnValue) == false)
            {
                lock (_syncObject)
                {
                    if (_producers.TryGetValue(producerSettings, out returnValue) == false)
                    {
                        var producerConfig = new ProducerConfig
                        {
                            BootstrapServers = producerSettings.BootstrapServers
                        };

                        var schemaRegistryConfig = new SchemaRegistryConfig
                        {
                            // Note: you can specify more than one schema registry url using the
                            // schema.registry.url property for redundancy (comma separated list). 
                            // The property name is not plural to follow the convention set by
                            // the Java implementation.
                            SchemaRegistryUrl = producerSettings.SchemaRegistryUrl,
                            // optional schema registry client properties:
                            SchemaRegistryRequestTimeoutMs = 5000,
                            SchemaRegistryMaxCachedSchemas = 10
                        };

                        var consumerConfig = new ConsumerConfig
                        {
                            BootstrapServers = producerSettings.BootstrapServers,
                            GroupId = "avro-specific-example-group"
                        };

                        var avroSerializerConfig = new AvroSerializerConfig
                        {
                            // optional Avro serializer properties:
                            BufferBytes = 100,
                            AutoRegisterSchemas = true
                        };

                        // Note: The User class in this project was generated using the Confluent fork of the avrogen.exe tool 
                        // (avaliable from: https://github.com/confluentinc/avro/tree/confluent-fork) which includes modifications
                        // that prevent namespace clashes with user namespaces that include the identifier 'Avro'. AvroSerializer
                        // and AvroDeserializer are also compatible with classes generated by the official avrogen.exe tool 
                        // (available from: https://github.com/apache/avro), with the above limitation.

                        // For local testing on windows, this will enable the AWS Mock Lambda Test Tool to load librdkafka. 
                        // When running on AWS Lambda, this will be skipped and the correct native librdkafka.so will be loaded instead.
                        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                        {
                            if (Library.Load(@"librdkafka\x64\librdkafka.dll") == false)
                                throw new Exception("Couldn't load library from: " + Path.Combine(Directory.GetCurrentDirectory(), @"librdkafka\x64\librdkafka.dll"));
                        }

                        var schemaRegistry = new CachedSchemaRegistryClient(schemaRegistryConfig);

                        returnValue =
                            new ProducerBuilder<string, Entities.User>(producerConfig)
                                .SetKeySerializer(new AvroSerializer<string>(schemaRegistry))
                                .SetValueSerializer(new AvroSerializer<User>(schemaRegistry))
                                .Build();

                        _producers.Add(producerSettings, returnValue);
                    }
                }
            }

            return returnValue;
        }
    }
}
